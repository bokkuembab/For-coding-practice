# 다이나믹 프로그래밍 실전 문제 - 효율적인 화폐 구성
# 먼저, 1부터 10000까지의 구성을 전부 만들지 못한다고 가정하고, 
# 화폐 개수를 최대값(이 문제의 범위에서는 10001로 해도 ok, INF도 좋음)으로 설정함
# 화폐 종류를 하나씩 확인하며 만들 수 있는 구성들에 화폐 개수를 저장함
# 이때, 기존 저장된 값과 비교하여 더 작은 값을 비교해 저장해줌
# (현재 구성-화폐 종류값)의 화폐 개수가 만들지 못하는 구성이면, 현재도 불가능

# 화폐 종류, 요구하는 합 입력 받기
n, m = map(int, input().split())

# 화폐 종류 리스트에 저장
array = []
for _ in range(n):
    array.append(int(input()))

# 미리 계산한 값 저장을 위한 DP 테이블 생성
dp = [10001] * (m + 1)
dp[0] = 0

# 화폐 단위 하나씩 만들 수 있는 구성 채워넣음
for mon in array:
    for i in range(mon, m + 1):     # 모든 화폐 구성에 대해 확인
        if dp[i - mon] != 10001:    # (현재 화폐 구성 - 화폐 단위)원을 만드는 방법이 존재하다면
             # 기존 화폐 개수와 현재 화폐 단위를 이용한 화폐 개수 중, 작은 것 채택
            dp[i] = min(dp[i], dp[i - mon] + 1)    

# 결과 출력
# m원을 만들 수 있는 경우가 없다면 -1 출력
if dp[m] == 10001:
    print(-1)
# m원을 만들 수 있는 경우가 있다면, 결과 출력
else:
    print(dp[m])